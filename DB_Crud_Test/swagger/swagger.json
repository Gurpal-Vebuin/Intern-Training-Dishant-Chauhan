{
  "openapi": "3.1.1",
  "info": {
    "title": "REST API Documentation",
    "version": "1.0.0",
    "description": "API documentation for the project, generated using Swagger."
  },
  "servers": [
    {
      "url": "http://localhost:5000/",
      "description": "Local server"
    }
  ],
  "security": [{ "bearerAuth": [] }],
  "apis": ["./src/interface/routes/*.ts"],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["users"],
        "summary": "Register the User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/postRegisterUser" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully!",
            "success": true
          },
          "400": {
            "description": "Unable to insert the User!",
            "success": false
          },
          "409": {
            "description": "User already registered exists",
            "success": false
          },
          "500": {
            "description": "Database Error! User not inserted.",
            "success": false
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["users"],
        "summary": "Login the User",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/postLoginUser" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/postLoginUser" },
                "example": {
                  "success": true,
                  "message": "Login Successful",
                  "token": "dfjsfkljflkdsjfdsklfjslkj343j3jlksfd"
                }
              }
            }
          },
          "401": {
            "description": "Invalid Email or Password.",
            "success": false
          },
          "404": { "description": "User Not Found.", "success": false },
          "500": {
            "description": "Error occurred while processing login!.",
            "success": false
          }
        }
      }
    },
    "/users/getusers": {
      "get": {
        "tags": ["users"],
        "summary": "Get all users",
        "parameters": [
          {
            "name": "isAdmin",
            "in": "query",
            "description": "Filter users based on admin status",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "success": true,
            "description": "Users fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/getUser" }
                }
              }
            }
          },
          "500": { "success": false, "description": "Error Fetching Users." }
        }
      }
    },

    "/users/updateuser": {
      "patch": {
        "tags": ["users"],
        "summary": "Update the User",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/patchUser" }
            }
          }
        },
        "responses": {
          "200": {
            "success": true,
            "description": "User updated successfully."
          },
          "401": {
            "success": false,
            "description": "Unauthorized: You can only update your own account."
          },
          "404": {
            "success": false,
            "description": "No user found to update."
          },
          "500": {
            "sucess": false,
            "description": "Error occurred while updating the user."
          }
        }
      }
    },
    "/users/deleteuser/{id}": {
      "delete": {
        "tags": ["users"],
        "summary": "Delete the User",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to delete."
          }
        ],
        "responses": {
          "200": {
            "success": true,
            "description": "User deleted successfully."
          },
          "400": {
            "success": false,
            "description": "Failed to delete the User!."
          },
          "401": {
            "success": false,
            "description": "Unauthorized: You can only delete your own account."
          },
          "404": {
            "success": false,
            "description": "No user found to delete."
          },
          "500": {
            "success": false,
            "description": "Error occurred while deleting the user."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "postRegisterUser": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "John Doe" },
          "email": { "type": "string", "example": "johndoe@gmail.com" },
          "password": { "type": "string", "example": "john123" },
          "phone": { "type": "string", "example": "9898981232" },
          "roles": {
            "type": "string",
            "enum": ["admin", "user"],
            "example": "user"
          }
        },
        "required": ["name", "email", "phone", "password", "roles"]
      },
      "postLoginUser": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "example": "johndoe@gmail.com" },
          "password": { "type": "string", "example": "john123" }
        },
        "required": ["email", "password"]
      },
      "getUser": {
        "type": "object",
        "properties": {
          "id": { "type": "number", "example": "1" },
          "name": { "type": "string", "example": "John Doe" },
          "email": { "type": "string", "example": "johndoe@gmail.com" },
          "phone": { "type": "string", "example": "9898981232" },
          "password": { "type": "string", "example": "john123" },
          "roles": {
            "type": "string",
            "enum": ["admin", "user"]
          }
        },
        "required": ["id", "name", "email", "phone", "password", "roles"]
      },
      "deleteUser": {
        "type": "object",
        "properties": {
          "id": { "type": "number", "example": "1" }
        },
        "required": ["id"]
      },
      "patchUser": {
        "type": "object",
        "properties": {
          "id": { "type": "number", "example": "1" },
          "name": { "type": "string", "example": "John Doe" },
          "phone": { "type": "string", "example": "9898981232" },
          "password": { "type": "string", "example": "john123" }
        },
        "required": ["id"]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
